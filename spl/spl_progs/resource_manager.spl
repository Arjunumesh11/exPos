//resource manger
//module 0

//R1 is function number
//R2 PID of current proccess
alias functionNum R1;
alias currentPID R2;

//accquire disk 2
if (functionNum == ACQUIRE_DISK) then
    // print "acq disk";
    while ([DISK_STATUS_TABLE]==1) do
        [PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;
        call SCHEDULER;
    endwhile;
    //status
    [DISK_STATUS_TABLE ] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;
endif;

//acquire  terminal 8
if (functionNum == 8) then
    alias terminal_status R3;
    terminal_status = [TERMINAL_STATUS_TABLE];
    while (terminal_status==1) do
        alias current_process R4;
        current_process = PROCESS_TABLE + 16*currentPID;
        [current_process + 4] = WAIT_TERMINAL;
        multipush(R1,R2,R3,R4);
        call SCHEDULER;
        multipop(R1,R2,R3,R4);
    endwhile;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    return;
endif;
//release terminal 9
if (functionNum == 9) then
    if(currentPID != [TERMINAL_STATUS_TABLE+1]) then
        R0=-1;
        print "fail terminal";
        return;
    endif;
    // print  "release";
    //breakpoint;
    [TERMINAL_STATUS_TABLE] = 0;
    alias process_itr R1;
    process_itr = 1;
    while (process_itr<16) do
        if([PROCESS_TABLE + 16*process_itr + 4 ] == WAIT_TERMINAL) then
            // print process_itr;
            //breakpoint;
            [PROCESS_TABLE + 16*process_itr + 4] = READY;
        endif;
        process_itr = process_itr + 1;
    endwhile;
    R0=0;
    return;
endif;
