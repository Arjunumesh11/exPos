//resource manger
//module 0

//R1 is function number
//R2 PID of current proccess
alias functionNum R1;
alias currentPID R2;

//accquire disk 2
if (functionNum == ACQUIRE_DISK) then
    // print "acq disk";
    while ([DISK_STATUS_TABLE]==1) do
        [PROCESS_TABLE + 16*currentPID + 4] = WAIT_DISK;
        multipush(R1,R2);
        call SCHEDULER;
        multipop(R1,R2,R3);
    endwhile;
    //status
    [DISK_STATUS_TABLE ] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;
endif;
//accquire inode 4
if(functionNum == ACQUIRE_INODE) then
    alias inode_index R3;
    while ([FILE_STATUS_TABLE +inode_index*4]!=-1) do
        alias current_process R4;
        current_process = PROCESS_TABLE + 16*currentPID;
        [current_process + 4] = WAIT_FILE;
        [current_process + 5] = inode_index;
        multipush(R1,R2,R3,R4);
        call SCHEDULER;
        multipop(R1,R2,R3,R4);
    endwhile;
    //checking for valid inode _____________-doubt_________________
    //check if file is deleted
    if([INODE_TABLE + 16*inode_index + 1]==-1) then
        R0=-1;
        return;
    endif;
    [FILE_STATUS_TABLE +inode_index*4] = currentPID;
    R0 = 0;
    return;
endif;
//release inode 5 
if (functionNum == RELEASE_INODE ) then
    alias inode_index R3;
    if(currentPID != [FILE_MANAGER + inode_index*4]) then
    R0 = -1;
    return;
    endif;
    //releaseing lock
    [FILE_MANAGER + inode_index*4] = -1;
    alias process_itr R4;
    process_itr = 1;
    while (process_itr < 16) do
        if ([PROCESS_TABLE + 16*process_itr + 4 ] == WAIT_FILE && [PROCESS_TABLE + 16*process_itr + 5 ] ==inode_index) then
            [PROCESS_TABLE + 16*process_itr + 4 ] = READY;
            [PROCESS_TABLE + 16*process_itr + 5 ] = 0;
        endif;
        process_itr = process_itr + 1;
    endwhile;
    R0 = 0;
    return;
endif;
//accquire sem 6
if (functionNum == ACQUIRE_SEMAPHORE) then
    alias sem_itr R3;
    sem_itr = 0;
    R0 = -1;
    
    while (sem_itr<MAX_SEM_COUNT) do
        if ([SEMAPHORE_TABLE + 4*sem_itr + 1]== 0) then
            [SEMAPHORE_TABLE + 4*sem_itr + 1] = 1;
            [SEMAPHORE_TABLE + 4*sem_itr + 1] = -1;
            R0 = sem_itr;
            return;
        endif;
        sem_itr = sem_itr + 1;
    endwhile;
    return;
endif;

//release sem 7
if(functionNum == RELEASE_SEMAPHORE) then
    alias sem_index R3;
    if([SEMAPHORE_TABLE + sem_index] == currentPID) then
        [SEMAPHORE_TABLE + sem_index] = -1;
        alias process_itr R4;
        process_itr = 1;
        while (process_itr<16) do
            if([PROCESS_TABLE + 16*process_itr + 4 ] == WAIT_SEMAPHORE) then
                if([PROCESS_TABLE + 16*process_itr + 5 ] == sem_index) then
                    [PROCESS_TABLE + 16*process_itr + 4] = READY;
                    [PROCESS_TABLE + 16*process_itr + 5] = 0;
                endif;
            endif;
            process_itr = process_itr + 1;
        endwhile;
        [SEMAPHORE_TABLE + sem_index + 1] = [SEMAPHORE_TABLE + sem_index + 1] -1;
    endif;
    
endif;


//acquire  terminal 8
if (functionNum == 8) then
    alias terminal_status R3;
    terminal_status = [TERMINAL_STATUS_TABLE];
    while (terminal_status==1) do
        alias current_process R4;
        current_process = PROCESS_TABLE + 16*currentPID;
        [current_process + 4] = WAIT_TERMINAL;
        multipush(R1,R2,R3,R4);
        call SCHEDULER;
        multipop(R1,R2,R3,R4);
    endwhile;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    return;
endif;
//release terminal 9
if (functionNum == 9) then
    if(currentPID != [TERMINAL_STATUS_TABLE+1]) then
        R0=-1;
        print "fail terminal";
        return;
    endif;
    // print  "release";
    //breakpoint;
    [TERMINAL_STATUS_TABLE] = 0;
    alias process_itr R1;
    process_itr = 1;
    while (process_itr<16) do
        if([PROCESS_TABLE + 16*process_itr + 4 ] == WAIT_TERMINAL) then
            // print process_itr;
            //breakpoint;
            [PROCESS_TABLE + 16*process_itr + 4] = READY;
        endif;
        process_itr = process_itr + 1;
    endwhile;
    R0=0;
    return;
endif;
