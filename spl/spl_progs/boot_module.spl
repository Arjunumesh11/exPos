//bootloader
// print "bootLoader";
//MOD 7
//INIT
loadi(65,7);
loadi(66,8);
//disk free list
loadi(61,2);

//halt
loadi(22,35);
loadi(23,36);

//exception
loadi(2,15);
loadi(3,16);

//library
loadi(63,13);
loadi(64,14);

//timer
loadi(4,17);
loadi(5,18);

//console
loadi(8,21);
loadi(9,22);

//disk
loadi(6,19);
loadi(7,20);
//int4
loadi(10,23);
loadi(11,24);
//int6
loadi(14,27);
loadi(15,28);
//int7
loadi(16,29);
loadi(17,30);
//int8
loadi(18,31);
loadi(19,32);
//int9
loadi(20,33);
loadi(21,34);
//int10
loadi(22,35);
loadi(23,36);
//int11
loadi(24,37);
loadi(25,38);
//int13
loadi(28,41);
loadi(29,42);
//int14
loadi(30,43);
loadi(31,44);
//int15
loadi(32,45);
loadi(33,46);
//idle_program
loadi(69,11);
loadi(70,12);
//load inode table
loadi(59,3);
loadi(60,4);

//even
loadi(83,69);
//schedular
loadi(50,63);
loadi(51,64);
//resource manger mod 0
loadi(40,53);
loadi(41,54);
//device manager mod 4
loadi(48,61);
loadi(49,62);
//process manger mod 1
loadi(42,55);
loadi(43,56);
//memory manager mod 2 
loadi(44,57);
loadi(45,58);
//__________INIT program________________

//library
PTBR=PAGE_TABLE_BASE+20;

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//Code
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";
//_____________________________________

//INIT
[PROCESS_TABLE + 16 + 1] = 1;
[PROCESS_TABLE + 16 + 4] = CREATED;
[PROCESS_TABLE + 16 + 11] = 80;
[PROCESS_TABLE + 16 + 12] = 0;
[PROCESS_TABLE + 16 + 13] = 8*512;
[PROCESS_TABLE + 16 + 14] = PAGE_TABLE_BASE + 20;
[PROCESS_TABLE + 16 + 15] = 10;
[76*512] = [65*512+1];


[DISK_MAP_TABLE+ 10 ] = -1;
[DISK_MAP_TABLE+ 10 + 1] = -1;
[DISK_MAP_TABLE+ 10 + 2] = -1;
[DISK_MAP_TABLE+ 10 + 3] = -1;
[DISK_MAP_TABLE+ 10 + 4] =  7;
[DISK_MAP_TABLE+ 10 + 5] =  8;
[DISK_MAP_TABLE+ 10 + 6] = -1;
[DISK_MAP_TABLE+ 10 + 7] = -1;
[DISK_MAP_TABLE+ 10 + 8] = -1;
[DISK_MAP_TABLE+ 10 + 9] = -1;

//setting per process table of init
alias per_process_itr R0;
per_process_itr = 0;
per_process_itr = 0;
while (per_process_itr<16) do
    [[PROCESS_TABLE + 16 + 11]*512 + RESOURCE_TABLE_OFFSET + per_process_itr ] = -1;  
    per_process_itr = per_process_itr + 1; 
endwhile;
//semtable
alias sem_itr R0;
sem_itr = 0;

while (sem_itr<MAX_SEM_COUNT) do
    [SEMAPHORE_TABLE + 4*sem_itr ] = -1; //locking PID
    [SEMAPHORE_TABLE + 4*sem_itr + 1] = 0; //count
    sem_itr = sem_itr + 1;
endwhile;
//intialsing filestatus
alias file_itr R0;
file_itr = 0;

while (file_itr<MAX_FILE_NUM) do
    [FILE_STATUS_TABLE + 4*file_itr ] = -1; //locking PID
    [FILE_STATUS_TABLE + 4*file_itr + 1] = -1; //count
    file_itr = file_itr + 1;
endwhile;
//buffer_table
alias buffer_itr R0;
buffer_itr = 0;

while (buffer_itr<MAX_BUFFER) do
    [BUFFER_TABLE + 4*buffer_itr ] = -1; //block num
    [BUFFER_TABLE + 4*buffer_itr + 1] = 0; //dirtybit
    [BUFFER_TABLE + 4*buffer_itr + 2] = -1; //locking_pid
    buffer_itr = buffer_itr + 1;
endwhile;
//setting state of remaining process to Terminated
//there are 16 process
alias current R1;
// there are 16 process 0 - 15
current = 2;
while (current<16) do
    [PROCESS_TABLE + 16*current + 4] = TERMINATED ; 
    current = current + 1;
endwhile;
[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;
// memory upto 82 is allocated for init and idel
// intialising rest of memory page from 76 - 127
current = 76;
while (current < 128) do
    if (current < 83) then
        [MEMORY_FREE_LIST + current] = 1;
    else
        [MEMORY_FREE_LIST + current] = 0;
    endif;
    current = current + 1;
endwhile;
current = 76;
//setting WAIT_MEM and Free_count
[SYSTEM_STATUS_TABLE + 2] = 127 - 82;
[SYSTEM_STATUS_TABLE + 3] = 0; 
return;
