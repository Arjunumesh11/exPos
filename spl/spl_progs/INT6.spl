//int 6
//read
// print "read";
// breakpoint;
alias user_sp R1;
alias current_pid R2;
current_pid = [SYSTEM_STATUS_TABLE + 1 ];
[PROCESS_TABLE + 16*current_pid +9 ] = INT_READ;
alias process_table R10;
process_table = PROCESS_TABLE + 16*current_pid;

//fetching stack address
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
//print SP;
user_sp = SP;
SP = [PROCESS_TABLE + (current_pid`* 16) + 11] * 512 - 1;

alias file_desc R3;
alias word R5; //address of word
word = [([PTBR + 2 * ((user_sp - 3) / 512)] * 512) + ((user_sp - 3) % 512)];
file_desc=[[PTBR + 2*(user_sp - 4)/512]*512 + (user_sp-4)%512];
// print "desc";
// breakpoint;
if (file_desc == -1) then
   
    multipush(R1,R2,R3,R4,R5);
    alias function_num R1;
    alias PID R2;
    alias word_address R3;

    function_num = 4; //terminal read
    PID = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1]+ 1];
    word_address = word;
    // print "terminal read";
    call DEVICE_MANAGER;
    // print "terminal read end";

    multipop(R1,R2,R3,R4,R5);
    [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = 0;
    // print "file";
    // breakpoint;
else
    // print "file_rd";
    // breakpoint;
    if (file_desc <0 || file_desc>7  ) then
        [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -1;
    else 
        alias per_process R4;
        per_process = [PROCESS_TABLE + 16*current_pid + 11]*512 + RESOURCE_TABLE_OFFSET +file_desc*2;
        if([per_process]!=FILE) then
            print "error";
            [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -1;
        else
            alias open_table R6;
            open_table = [per_process + 1];
            alias inode_itr R7;
            inode_itr = [OPEN_FILE_TABLE + open_table*4 ];
            // print "inode";
            // breakpoint;
            //acquire inode
            multipush(R1,R2,R3,R4,R5,R6,R7);
                R3 =inode_itr;
                R2 = [SYSTEM_STATUS_TABLE +1];
                R1 = ACQUIRE_INODE;
                call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6,R7);
            alias lseek R8;
            lseek = [OPEN_FILE_TABLE + open_table*4 + 2];
            //root file size = 480
            if(inode_itr == INODE_ROOT && lseek == 480) then
                print "root_inode";
                multipush(R1,R2,R10);
                    R3 = inode_itr;
                    R2 = [SYSTEM_STATUS_TABLE +1];
                    R1 = RELEASE_INODE;
                    call RESOURCE_MANAGER;
                multipush(R1,R2,R10);
                [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -1;
            else
                if ([INODE_TABLE + 16*inode_itr + 2]==lseek) then
                    [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -2;
                    print "size_inoe";
                    breakpoint;
                    multipush(R1,R2,R10);
                    R3 = inode_itr;
                    R2 = [SYSTEM_STATUS_TABLE +1];
                    R1 = RELEASE_INODE;
                    print "rel";
                    breakpoint;
                    call RESOURCE_MANAGER;
                multipush(R1,R2,R10);
                else
                alias block_num R4;
                block_num = [INODE_TABLE + 16*inode_itr + 8 + lseek/512];
                //buffered read
                multipush(R1,R2,R3,R4,R5,R6,R7);
                R1 = BUFFERED_READ;
                R2 = block_num;
                R3 = lseek%512;
                R4 = word;
                call FILE_MANAGER;
                multipop(R1,R2,R3,R4,R5,R6,R7);
                // print "buf";
                // breakpoint;
                [OPEN_FILE_TABLE + open_table*4 + 2] = [OPEN_FILE_TABLE + open_table*4 + 2]  +1;
                // print "read_inode";
                multipush(R1,R2,R10);
                    R3 = inode_itr;
                    R2 = [SYSTEM_STATUS_TABLE +1];
                    R1 = RELEASE_INODE;
                    call RESOURCE_MANAGER;
                multipop(R1,R2,R10);
                // print "inode";
                // breakpoint;
                [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = 0;
            endif;
            endif;
        endif;
     endif;
endif;
// print "read_end";
// breakpoint;
[PROCESS_TABLE + 16*current_pid +9] = 0;
SP = [PROCESS_TABLE + 16*current_pid +13];
// print "read";
// breakpoint;
ireturn;