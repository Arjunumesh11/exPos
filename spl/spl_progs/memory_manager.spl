//memory manager
//MOD 2


//R1 is function number
//R2 PID of current proccess
alias functionNum R1;
alias currentPID R2;

//get freepage 1
if(functionNum == GET_FREE_PAGE) then
    //increment mem_wait_count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1; 
    //while mem is full schedule other process
    while ([SYSTEM_STATUS_TABLE + 2 ]==0) do
        //setting current process state to WAIT_MEM_COUNT
        [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE] + 4] = WAIT_MEM;
        multipush(R1,R2);
        call SCHEDULER;
        multipop(R1,R2);
    endwhile;
    //decrement mem_wait_count 
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
    alias free_page_itr R3;
    free_page_itr = 76;
//---------------> dont forget to change the user page of init , idle
    //get free page 76 - 127

    while (free_page_itr < 128) do
        if([MEMORY_FREE_LIST + free_page_itr] == 0) then
            [MEMORY_FREE_LIST + free_page_itr] = 1;
            //return 
            R0 = free_page_itr;
            return;
        endif;
        free_page_itr = free_page_itr + 1;
    endwhile;
   
    return;
endif;

//release page 2
if(functionNum == RELEASE_PAGE) then
    [MEMORY_FREE_LIST + R2] = [MEMORY_FREE_LIST + R2] - 1;
    if ([MEMORY_FREE_LIST + R2] == 0) then
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
    alias process_itr R3;
    process_itr = 1;
    while (process_itr < 16) do
        if ([PROCESS_TABLE + 16*process_itr + 4 ] == WAIT_MEM) then
            [PROCESS_TABLE + 16*process_itr + 4 ] = READY;
        endif;
        process_itr = process_itr + 1;
    endwhile;
    endif;   
    return;
endif;

//release block 
if(functionNum == RELEASE_BLOCK) then
    alias block_num R3;
    [DISK_FREE_LIST + block_num] = [DISK_FREE_LIST + block_num] - 1;
    return;
endif;

// get code page 5
// R1 function number
// R2 block number
if(functionNum == GET_CODE_PAGE) then

    alias block_num R2;
    alias process_itr R3 ; //16
    alias disk_map_itr R4;
    alias flag R5;
    flag = 0;
    process_itr = 1;
    while (process_itr < MAX_PROC_NUM) do
            disk_map_itr = 0;
            while (disk_map_itr<10) do
                if([DISK_MAP_TABLE + 10*process_itr + disk_map_itr] == block_num) then
                  if ([PAGE_TABLE_BASE + 20*process_itr+2*disk_map_itr]!=-1) then
                    flag = 1;
                    break;
                  endif;
                endif;
                disk_map_itr = disk_map_itr + 1;
            endwhile;
            if(flag==1) then
                break;
            endif;
            process_itr = process_itr +1;
    endwhile;
    if(flag == 1) then
        R0 = [PAGE_TABLE_BASE + 20*process_itr + disk_map_itr*2];
        [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + 20*process_itr + disk_map_itr*2]] = [MEMORY_FREE_LIST + [PAGE_TABLE_BASE + 20*process_itr + disk_map_itr*2]] + 1;
        return; 
    endif;
    multipush(R1,R2,R3,R4,R5);
        R1 = GET_FREE_PAGE;
        call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4,R5);
    R3 = R0;
    R4 = R2;

    call disk_load;
 
    
    return;
endif;

disk_load:
    // print "mem";
    multipush(R0,R1,R2,R3,R4,R5);
    R1 = DISK_LOAD;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call DEVICE_MANAGER;
    multipop(R0,R1,R2,R3,R4,R5);
return;