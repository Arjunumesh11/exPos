//process manager
//MOD 1

//R1 is function number
//R2 PID of current proccess
alias functionNum R1;
alias currentPID R2;

//for release page function
alias block_num R5;

//get pcb entry
if (functionNum == GET_PCB_ENTRY) then
    alias process_itr R3;
    process_itr = 1;
    while (process_itr<16) do
        if([PROCESS_TABLE + 16*process_itr + 4] == TERMINATED) then
            [PROCESS_TABLE + 16*process_itr + 1] = process_itr;
            [PROCESS_TABLE + 16*process_itr + 4] = ALLOCATED;
            [PROCESS_TABLE + 16*process_itr + 14] = PAGE_TABLE_BASE + 20*process_itr;
            [PROCESS_TABLE + 16*process_itr + 15] = 10 ;
            R0 = process_itr;
            // breakpoint;
            return;
    endif;
    process_itr = process_itr + 1;
    endwhile;
    if(process_itr == 16) then
        R0 = -1;
        return;
    endif;
    return;
endif;


//Free user area page
if (functionNum == FREE_USER_AREA_PAGE) then
    alias process_table R3;
    process_table = PROCESS_TABLE + 16*currentPID;
    //release page
    block_num = [process_table + 11];
    alias per_entry R4;
    alias per_process R6;
    per_process = block_num*512 + RESOURCE_TABLE_OFFSET;
    alias per_process_itr R7; 
        per_process_itr = 0;
        while (per_process_itr <16) do
            if ([per_process + per_process_itr]==SEMAPHORE) then
                multipush(R1,R2,R3,R4,R5,R6);
                R1 = RELEASE_SEMAPHORE;
                R2 =  [per_process + per_process_itr + 1 ];
                call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R4,R5,R6);
            endif;
            if ([per_process + per_process_itr]==FILE) then
                multipush(R1,R2,R3,R4,R5,R6);
                R1 = INT_CLOSE;
                R2 =  [per_process + per_process_itr + 1 ];
                call FILE_MANAGER;
                multipop(R1,R2,R3,R4,R5,R6);
            endif;
            per_process_itr = per_process_itr + 2;        
        endwhile;
    call release_page;
    return;
endif;

//EXIT_process
if (functionNum == 3) then
    alias process_table R3;
    process_table = PROCESS_TABLE + 16*currentPID;
    //Free page table
    multipush(R1,R2,R3);
    functionNum = FREE_PAGE_TABLE;
    call PROCESS_MANAGER;
    multipop(R1,R2,R3);    
    //Free user area page
    multipush(R1,R2,R3);
    functionNum = FREE_USER_AREA_PAGE;
    call PROCESS_MANAGER;
    multipop(R1,R2,R3);    
    [ process_table + 4 ] =TERMINATED;
    if([PROCESS_TABLE +16*currentPID + 9]!=INT_EXEC) then
        alias process_itr R4;
        process_itr = 0;
        while (process_itr < MAX_PROC_NUM) do
            if ([PROCESS_TABLE + 16*process_itr + 4 ] == WAIT_PROCESS) then
                if([PROCESS_TABLE + 16*process_itr + 5 ] == currentPID) then
                    [PROCESS_TABLE + 16*process_itr + 4 ] = READY;
                    [PROCESS_TABLE + 16*process_itr + 5 ] = -1;
                endif;
            endif;
            if ([PROCESS_TABLE + 16*process_itr +  2] == currentPID) then
                [PROCESS_TABLE + 16*process_itr +  2] = -1;
            endif;
            process_itr = process_itr + 1;
        endwhile;
    endif;
    return;
endif;
//Free page table
if (functionNum == FREE_PAGE_TABLE) then
//--------------->Need to change to loop 
    //invalidating page table
    //library
    alias page_itr R4;
    page_itr = 0;
    while (page_itr<20) do
        if ([ PTBR + page_itr ]!=-1) then
            block_num = [ PTBR + page_itr ];
            call release_page;
            [ PTBR + page_itr ] = -1;
            [ PTBR + page_itr + 1] = "0000"; 
            call release_block;           
        endif;
        page_itr = page_itr + 2;
    endwhile;
    //invalidating al disk mpa table of current process
    alias disk_map R5;
    disk_map = DISK_MAP_TABLE + 10*currentPID; 
    [disk_map ] = -1;
    [disk_map + 1] = -1;
    [disk_map + 2] = -1;
    [disk_map + 3] = -1;
    [disk_map + 4] = -1;
    [disk_map + 5] = -1;
    [disk_map + 6] = -1;
    [disk_map + 7] = -1;
    [disk_map + 8] = -1;
    [disk_map + 9] = -1;
    return;
endif;
if(functionNum == KILL_ALL) then
    alias inode_itr R3;

    inode_itr = 0;
    //lock all the files so that other process dont lock them
    while (inode_itr < MAX_FILE_NUM) do
        if [INODE_TABLE + 16*inode_itr + 1] != -1 then
            multipush(R1, R2, R3);
            R1 = ACQUIRE_INODE;
            R3 = inode_itr;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
            multipop( R1, R2, R3);
        endif;
        inode_itr = inode_itr + 1;
    endwhile;

    alias pid_itr R4;
    pid_itr = 2;

    while (pid_itr < MAX_PROC_NUM) do
    //exiting all process except current process
        if pid_itr != currentPID && [PROCESS_TABLE +16*pid_itr + 4] != TERMINATED then
            multipush(R0, R1, R2, R3);
            R1 = EXIT_PROCESS;
            R2 = pid_itr;
            call PROCESS_MANAGER;
            multipop(R0, R1, R2, R3);
        endif;
        pid_itr = pid_itr + 1;
    endwhile;

    inode_itr = 0;
    //unlock all files
    while inode_itr < MAX_FILE_NUM do
        if [INODE_TABLE + 16*inode_itr + 1] != -1 then
            multipush(R0, R1, R2, R3);
            R1 = RELEASE_INODE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R3 = inode_itr;
            call RESOURCE_MANAGER;
            multipop(R0, R1, R2, R3);
        endif;
        inode_itr = inode_itr + 1;
    endwhile;
    return;
endif;



release_page:
    multipush(R1,R2,R3,R4,R5);
    //calling release page
    functionNum = RELEASE_PAGE;
    R2 = block_num;
    call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4,R5);
    
return;

release_block:
    multipush(R1,R2,R3,R4,R5);
    //calling release page
    functionNum = RELEASE_BLOCK;
    R2 = block_num;
    call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4,R5);
return;