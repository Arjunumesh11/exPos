//semlock and semUnlock
//int 14
alias user_sp R2;
alias current_pid R1;
[PROCESS_TABLE +  [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]* 16) + 11] * 512 - 1;
current_pid = [SYSTEM_STATUS_TABLE + 1 ];
user_sp = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
alias sys_call_num R3;
sys_call_num = [[PTBR + 2*(user_sp - 5)/512]*512 + (user_sp-5)%512];

//semlocl

if (sys_call_num == INT_SEMLOCK) then
    //print "sem_lio";
    //breakpoint;
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1 ]+9 ] = INT_SEMLOCK;
    alias sem_entry R6;
    sem_entry = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 + RESOURCE_TABLE_OFFSET;
    alias file_desc R4;
    file_desc = [[PTBR + 2*(user_sp - 4)/512]*512 + (user_sp-4)%512];

    if (file_desc <0 || file_desc>7 || [sem_entry + file_desc*2 ]!=1) then
        print "illega_desc";
        breakpoint;
        [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -1;
    else 
        //checking whether current process have ownership
        //print "sem_sys";
        //breakpoint;
        alias  sem_index R5;
        sem_index = [sem_entry + file_desc*2 + 1 ];
        while([SEMAPHORE_TABLE + sem_index ]!= -1) do
            [PROCESS_TABLE + 16*current_pid + 4] = WAIT_SEMAPHORE;
            [PROCESS_TABLE + 16*current_pid + 5] = sem_index;
            multipush(R1,R2,R3,R4,R5,R6);
            call SCHEDULER;
            multipop(R1,R2,R3,R4,R5,R6);
        endwhile;
        [SEMAPHORE_TABLE + sem_index ] = current_pid;
        //return zero
        [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = 0;
    endif;
    
    SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1 ]+9 ] = 0;
    ireturn;
endif;


if (sys_call_num == INT_SEMUNLOCK) then
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1 ]+9 ] = INT_SEMUNLOCK;
    alias sem_entry R7;
    sem_entry = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 + RESOURCE_TABLE_OFFSET;
    alias file_desc R4;
    file_desc = [[PTBR + 2*(user_sp - 4)/512]*512 + (user_sp-4)%512];

    if (file_desc <0 || file_desc>7 || [sem_entry + file_desc*2 ]!=1) then
        [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -1;
    else 
        // checking the owner ship of sem
        alias  sem_index R5;
        sem_index = [sem_entry + file_desc*2 + 1 ];
        if ([SEMAPHORE_TABLE + sem_index ]!=current_pid) then
            [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -2;
        else
        [SEMAPHORE_TABLE + sem_index ]=-1;
        alias process_itr R6;
        process_itr = 1;
        while (process_itr<16) do
            if([PROCESS_TABLE + 16*process_itr + 4 ] == WAIT_SEMAPHORE) then
                if([PROCESS_TABLE + 16*process_itr + 5 ] == sem_index) then
                    [PROCESS_TABLE + 16*process_itr + 4] = READY;
                    [PROCESS_TABLE + 16*process_itr + 5] = 0;
                endif;
            endif;
            process_itr = process_itr + 1;
        endwhile; 
        endif;
    endif;
    SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1 ]+9 ] = 0;
    ireturn;
endif;