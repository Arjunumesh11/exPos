//INT 9
//EXEC

alias userSP R0;
alias current_pid R1;
alias process_table R2;
alias block_num R5;
alias page_num R6;

userSP=SP;
current_pid = [SYSTEM_STATUS_TABLE + 1];
// print current_pid;
process_table = PROCESS_TABLE + 16*current_pid;
//setting mod to 9 systemcall no
[process_table + 9] = INT_EXEC;

[process_table + 13] = SP;
SP = [process_table + 11]*512 - 1;

alias filename R3;
filename=[[PTBR + 2*(userSP - 4)/512]*512 + (userSP-4)%512];
alias inode_itr R4;
inode_itr = 1;
while (inode_itr<MAX_FILE_NUM) do
    if([INODE_TABLE + 16*inode_itr + 1] == filename) then
        if([INODE_TABLE + 16*inode_itr]!=EXEC) then
            inode_itr = MAX_FILE_NUM;
        endif;
        break;
    endif;
    inode_itr = inode_itr + 1;
endwhile;
//could not find the file
if(inode_itr==MAX_FILE_NUM) then
    //setting return value to -1
    print "NO file";
    [[PTBR + 2*(userSP - 1)/512]*512 + (userSP-1)%512] = -1;
else 

    multipush(R1,R2,R3,R4);
    alias function_num R1;
    alias PID R2;
    PID = current_pid;
    //exit_process function
    function_num = 3; 
    call PROCESS_MANAGER;
    multipop(R1,R2,R3,R4);

    //regaining userpage
    [MEMORY_FREE_LIST + [process_table + 11]] = 1;
    //reducing mem_count
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2]-1;
    //print "after exit";
    //breakpoint;
    SP = [process_table + 11]*512 - 1;
    [process_table + 7] = inode_itr;
    [process_table + 4] = RUNNING;
    //setting per-process resource table
    alias per_process_itr R5;
    per_process_itr = 0;
    while (per_process_itr<16) do
        [[process_table + 11]*512 + RESOURCE_TABLE_OFFSET + per_process_itr ] = -1;  
        per_process_itr = per_process_itr + 1; 
    endwhile;

    //setting page_table entry for new process
    PTBR = PAGE_TABLE_BASE + current_pid*20;
    //library
    //read only
    [PTBR+0] = 63;
    [PTBR+1] = "0100";
    [PTBR+2] = 64;
    [PTBR+3] = "0100";

    //getting page for stack and heap;
    multipush(R1,R2,R3,R4);
    //get page table function
    //Heap
    [PTBR+4] = -1;
    [PTBR+5] = "0000";
    [PTBR+6] = -1;
    [PTBR+7] = "0000";
    //print "userpage";
   // breakpoint;
    //Stack
    function_num = GET_FREE_PAGE; 
    call MEMORY_MANAGER;
    [PTBR+16] = R0;
    [PTBR+17] = "0110";
    function_num = GET_FREE_PAGE; 
    call MEMORY_MANAGER;
    [PTBR+18] = R0;
    [PTBR+19] = "0110";
    
    multipop(R1,R2,R3,R4);
    //Code
    print "code";
    breakpoint;
    if ([INODE_TABLE + 16*inode_itr + 8]!=-1) then
        multipush(R1,R2,R3,R4);
        //get page table function
        // print "code";
        
        function_num = GET_CODE_PAGE; 
        R2 = [INODE_TABLE + 16*inode_itr + 8]; //block number
        call MEMORY_MANAGER;
        [PTBR+8] = R0;
        [PTBR+9] = "0100";
        multipop(R1,R2,R3,R4);
    else 
    print "DISK : no code page";
    endif;
    //setting diskmap table 
    [DISK_MAP_TABLE+ 10*current_pid ] = -1;
    [DISK_MAP_TABLE+ 10*current_pid + 1] = -1;
    [DISK_MAP_TABLE+ 10*current_pid + 2] = -1;
    [DISK_MAP_TABLE+ 10*current_pid + 3] = -1;
    [DISK_MAP_TABLE+ 10*current_pid + 4] = [INODE_TABLE + 16*inode_itr + 8];
    [DISK_MAP_TABLE+ 10*current_pid + 5] = [INODE_TABLE + 16*inode_itr + 9];
    [DISK_MAP_TABLE+ 10*current_pid + 6] = [INODE_TABLE + 16*inode_itr + 10];
    [DISK_MAP_TABLE+ 10*current_pid + 7] = [INODE_TABLE + 16*inode_itr + 11];
    [DISK_MAP_TABLE+ 10*current_pid + 8] = -1;
    [DISK_MAP_TABLE+ 10*current_pid + 9] = -1;
    //invalidating rest of code page
    
    [PTBR+10] = -1;
    [PTBR+11] = "0000";
    [PTBR+12] = -1;
    [PTBR+13] = "0000";
    [PTBR+14] = -1;
    [PTBR+15] = "0000";
    
        alias stack_mem R5;
        alias code_mem R6;

        stack_mem = [PTBR+16];
        code_mem = [PTBR+8];
        [stack_mem*512] = [code_mem*512+1];
        SP = 8*512;
        
        ireturn;
    
    
endif;
[process_table +9] = 0;
SP = [process_table + 13];
ireturn;

mem_manager:
    // print "mem";
    multipush(R1,R2,R3,R4,R5);
    R2 = current_pid; 
    R1 = 2;
    R3 = page_num;
    R4 = block_num;

    call DEVICE_MANAGER;
    multipop(R1,R2,R3,R4,R5);
return;
