//int 15
//shutdown
//fetching stack address
alias current_pid R0;
alias process_table R1;

current_pid = [SYSTEM_STATUS_TABLE + 1]; 
process_table = PROCESS_TABLE + current_pid * 16;

            
[PROCESS_TABLE + 16*current_pid +9 ] = INT_SHUTDOWN;
alias user_sp R2;
user_sp = SP;
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
if(current_pid != 1 && [PROCESS_TABLE + 16*current_pid+3]!=ROOT) then
    [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -1;
else
    //kill all
    multipush(R0, R1, R2);
    R1 = KILL_ALL;
    R2 = [SYSTEM_STATUS_TABLE + 1];
    call PROCESS_MANAGER;
    multipop(R0, R1, R2);

    alias buff_itr R3;
    buff_itr = 0;
    //if buffer dirty then write back
    while buff_itr < 4 do
        if [BUFFER_TABLE + 4*buff_itr] != -1 && [BUFFER_TABLE + 4*buff_itr + 1] == 1 then
        print "saving..";  
        breakpoint;  
        multipush(R0,R1, R2, R3);
            R4 = [BUFFER_TABLE + 4*buff_itr];
            R3 = BUFFER_BASE + buff_itr;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            R1 = DISK_STORE;
            call DEVICE_MANAGER;
            multipop(R0,R1, R2, R3);
            [BUFFER_TABLE + 4*buff_itr + 1] = 0;
        endif;
        buff_itr = buff_itr + 1;
    endwhile;

    alias block_num R4;
    alias page_num R3;
  //storeing......
    //inode 
    page_num = 59;
    block_num =3 ;
    call disk_store;
    page_num = 60;
    block_num = 4;
    call disk_store;
    //disk_free
    page_num = 57;
    block_num = 2;
    call disk_store;
    //root
    page_num = 62;
    block_num = 5;
    call disk_store;

endif;
[process_table +9] = 0;
SP = [process_table + 13];
ireturn;
halt;

disk_store:
    multipush(R0,R1,R2);
        R2 = current_pid;
        R1 = DISK_STORE;
       // R3 = page_num;
       // R4 = block_num;
        call DEVICE_MANAGER;
    multipop(R0,R1,R2);
return;