//semget and segrelease
//int 13

alias user_sp R2;
alias current_pid R1;
[PROCESS_TABLE +  [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1]* 16) + 11] * 512 - 1;
current_pid = [SYSTEM_STATUS_TABLE + 1 ];
user_sp = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
alias sys_call_num R3;
sys_call_num = [[PTBR + 2*(user_sp - 5)/512]*512 + (user_sp-5)%512];

//semget 17
if (sys_call_num == INT_SEMGET) then
    alias per_entry R4;
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1 ]+9 ] = INT_SEMGET;
    call get_free_entry_per;
    per_entry = R0;
    if (per_entry == -1) then
        [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -1;
    else
        multipush(R1,R2,R3,R4);
            R1 = ACQUIRE_SEMAPHORE;
            R2 = [SYSTEM_STATUS_TABLE + 1];
            call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4);
        alias sem_table R5;
        sem_table = R0;
        if (sem_table == -1) then
            [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -2;
        else
        [[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 + RESOURCE_TABLE_OFFSET + per_entry + 1] = sem_table ;
        endif;
    endif;
    SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1 ]+9 ] = 0;
    ireturn;
endif;

if (sys_call_num == INT_SEMRELEASE) then
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1 ]+9 ] = INT_SEMRELEASE;
    alias file_desc R4;
    file_desc = [[PTBR + 2*(user_sp - 4)/512]*512 + (user_sp-4)%512];
    if (file_desc <0 || file_desc>7 || [[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 + RESOURCE_TABLE_OFFSET + file_desc ]!=1) then
        [[PTBR + 2*(user_sp - 1)/512]*512 + (user_sp-1)%512] = -1;
    else 
        //calling release sem
        multipush(R1,R2,R3,R4);
            R1 = RELEASE_SEMAPHORE;
            R2 = [SEMAPHORE_TABLE + file_desc];
            call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4);
        alias per_entry R5;
        alias per_process R8;
        per_process = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 + RESOURCE_TABLE_OFFSET;
        alias per_process_itr R6; 
        per_process_itr = 0;
        while (per_process_itr <16) do
            if ([per_process + per_process_itr]==SEMAPHORE) then
                if ([per_process + per_process_itr + 1]==file_desc) then
                    break;
                endif;
            endif;
            per_process_itr = per_process_itr + 2;        
        endwhile;
        [[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 + RESOURCE_TABLE_OFFSET + per_process_itr  ] = -1;
        [[PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 + RESOURCE_TABLE_OFFSET + per_process_itr  + 1 ] = -1;
    endif;
    SP = [PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13];
    [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1 ]+9 ] = 0;
    ireturn;
endif;

get_free_entry_per:
    multipush(R1,R2,R3,R4);
    R0 = -1;
    alias per_process R1;
    per_process = [PROCESS_TABLE + 16*[SYSTEM_STATUS_TABLE + 1] + 11]*512 + RESOURCE_TABLE_OFFSET;
    alias per_process_itr R2; 
    per_process_itr = 0;
    while (per_process_itr <16) do
        if ([per_process + per_process_itr]==-1) then
            R0 = per_process_itr;
            [per_process + per_process_itr] = SEMAPHORE;//setting it as sema 
            break;
        endif;
        per_process_itr = per_process_itr + 2;        
    endwhile;
    multipop(R1,R2,R3,R4);
return;